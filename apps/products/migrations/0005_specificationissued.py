# Generated by Django 2.2.10 on 2020-11-22 18:59

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('clients', '0004_auto_20201022_1949'),
        ('products', '0004_auto_20201022_1949'),
    ]

    operations = [
        migrations.CreateModel(
            name='SpecificationIssued',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_issue', models.DateField(default=datetime.date.today)),
                ('internal_diameter_target', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('internal_diameter_tolerance_top', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('internal_diameter_tolerance_bottom', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('external_diameter_target', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('external_diameter_tolerance_top', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('external_diameter_tolerance_bottom', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('wall_thickness_target', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('wall_thickness_tolerance_top', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('wall_thickness_tolerance_bottom', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('length_target', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('length_tolerance_top', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('length_tolerance_bottom', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('flat_crush_resistance_target', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Pole integer powinno zawierać liczbę całkowitą', regex='^[0-9]*$')])),
                ('flat_crush_resistance_tolerance_top', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Pole integer powinno zawierać liczbę całkowitą', regex='^[0-9]*$')])),
                ('flat_crush_resistance_tolerance_bottom', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Pole integer powinno zawierać liczbę całkowitą', regex='^[0-9]*$')])),
                ('moisture_content_target', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Pole integer powinno zawierać liczbę całkowitą', regex='^[0-9]*$')])),
                ('moisture_content_tolerance_top', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Pole integer powinno zawierać liczbę całkowitą', regex='^[0-9]*$')])),
                ('moisture_content_tolerance_bottom', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Pole integer powinno zawierać liczbę całkowitą', regex='^[0-9]*$')])),
                ('colour', models.CharField(blank=True, max_length=100)),
                ('finish', models.CharField(blank=True, max_length=100)),
                ('maximum_height_of_pallet', models.FloatField(validators=[django.core.validators.RegexValidator(message='Pole float powinno zawierać liczbę całkowitą bądź zmiennoprzecinkową', regex='^([0-9]*|[0-9]*\\.\\d+)$')])),
                ('pallet_protected_with_paper_edges', models.CharField(choices=[('Y', 'Tak'), ('N', 'Nie')], default=('Y', 'Tak'), max_length=10)),
                ('pallet_wrapped_with_stretch_film', models.CharField(choices=[('Y', 'Tak'), ('N', 'Nie')], default=('Y', 'Tak'), max_length=10)),
                ('cores_packed_in', models.CharField(choices=[('Horizontal', 'w pozycji pionowej'), ('Vertical', 'w pozycji poziomej'), ('On_carton', 'na kartonach')], default='Horizontal', max_length=20)),
                ('quantity_on_the_pallet', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Pole integer powinno zawierać liczbę całkowitą', regex='^[0-9]*$')])),
                ('remarks', models.TextField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_specifications', to='clients.Client', to_field='client_sap_id')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issued_specifications', to='products.Product', to_field='product_sap_id')),
            ],
        ),
    ]
